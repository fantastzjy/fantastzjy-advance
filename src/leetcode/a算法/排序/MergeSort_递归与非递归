//package leetcode.a算法.排序;
//
//public class MergeSort_递归与非递归 {
//
//    public static void main(String[] args) {
//
//        //在mergeSort_v1 中
//        //错误
//        //原因是把 1 划入了前面   而划到前面之后 前面的就不是排好序的了，如果没有最后两个while 追加的话结果会是2 3 4 5 6 7 8 1 0
//        // int[] arr = {2, 4, 6, 8, 1, 3, 5, 7, 9}; //9
//        //正确
//        // int[] arr = {1,4,7,8,3,6,9}; //9
//        // mergeSort_v1(arr);
//
//        int[] arr = {2, 4, 6, 8, 1, 3, 5, 7, 9}; //9
//        mergeSort(arr, 0, arr.length - 1);
//        for (int i : arr) {
//            System.out.print(i + "\t");
//        }
//    }
//
//
//    int temp[100];
//
//    void Merge(int l, int mid, int r) {
//        int p1 = l, p2 = mid + 1, k = 0;
//        while (p1 <= mid && p2 <= r) {
//            temp[k++] = a[p1] < a[p2] ? a[p1++] : a[p2++];
//        }
//        while (p1 <= mid){
//            temp[k++] = a[p1++];
//        }
//        while (p2 <= r){
//            temp[k++] = a[p2++];
//        }
//
//        for (int i = l; i <= r; i++){
//            a[i] = temp[i - l];
//        }
//
//    }
//
//    //递归版
//    void mergesort(int l, int r) {
//        if (l == r) {
//            return;
//        }
//        int mid = (l + r) / 2;
//        mergesort(l, mid);
//        mergesort(mid + 1, r);
//        Merge(l, mid, r);
//    }
//
//
//    //非递归版
//    void _mergesort(int n)
//    {
//        int len=1;
//        while(len<n)
//        {
//            len*=2;
//            for(int i=0; i<n; i+=len)     {
//                Merge(i,i+len/2-1,min(i+len,n)-1);
//            }
//
//        }
//    }
//}
